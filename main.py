import requests
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from xml.etree import ElementTree as ET
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
API_KEY = os.getenv("NEWS_API_KEY")


"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ InfoBot!* ‚ú®\n\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üåä /author - –û–± –∞–≤—Ç–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "üì∞ /news - –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞\n"
        "üíπ /rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§\n"
        "üîÑ /convert [—Å—É–º–º–∞] [–∏–∑] [–≤] - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n\n"
        "*–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞:*\n"
        "`/convert 100 USD RUB`\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é üëá",
        parse_mode="Markdown"
    )

"""–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å –¶–ë –†–§"""
async def get_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        url = "https://www.cbr.ru/scripts/XML_daily.asp"
        response = requests.get(url)
        response.raise_for_status()
        
        root = ET.fromstring(response.text)
        date = root.attrib['Date']
        formatted_date = datetime.now().strftime('%d.%m.%Y')
        
        currencies = {
            'USD': 'üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê',
            'EUR': 'üá™üá∫ –ï–≤—Ä–æ',
            'CNY': 'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å'
        }
        
        message = f"üìä –ö—É—Ä—Å—ã –¶–ë –†–§ –Ω–∞ {formatted_date}:\n\n"
        
        for code, name in currencies.items():
            valute = root.find(f".//Valute[CharCode='{code}']")
            value = valute.find('Value').text
            nominal = valute.find('Nominal').text
            message += f"{name}: {value} —Ä—É–±. (–∑–∞ {nominal} {code})\n"
            
        message += "\n‚ÑπÔ∏è –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12:00 –ø–æ –ú–°–ö"
        await update.message.reply_text(message, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
            parse_mode="Markdown"
        )
        print(f"Error in get_rates: {e}")

"""–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç"""
async def convert_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        
        amount = float(context.args[0])
        from_curr = context.args[1].upper()
        to_curr = context.args[2].upper()

        url = "https://www.cbr.ru/scripts/XML_daily.asp"
        response = requests.get(url)
        response.raise_for_status()
        root = ET.fromstring(response.text)

        def get_rate(currency):
            if currency == 'RUB':
                return 1.0
            valute = root.find(f".//Valute[CharCode='{currency}']")
            if valute is None:
                raise ValueError(f"–í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            nominal = float(valute.find('Nominal').text.replace(',', '.'))
            value = float(valute.find('Value').text.replace(',', '.'))
            return value / nominal

        from_rate = get_rate(from_curr)
        to_rate = get_rate(to_curr)
        
        result = (amount * from_rate) / to_rate
        
        await update.message.reply_text(
            f"üí± *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:*\n\n"
            f"üîπ *{amount:.2f} {from_curr}* = *{result:.2f} {to_curr}*\n\n"
            f"üìå *–ö—É—Ä—Å:* 1 {from_curr} = {from_rate/to_rate:.4f} {to_curr}\n\n"
            f"üîÑ –û–±–º–µ–Ω –ø–æ –∫—É—Ä—Å—É –¶–ë –†–§ –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}",
            parse_mode="Markdown"
        )
    except ValueError as e:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!*\n\n"
            "üîπ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:*\n"
            "`/convert [—Å—É–º–º–∞] [–∏–∑ –≤–∞–ª—é—Ç—ã] [–≤ –≤–∞–ª—é—Ç—É]`\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n"
            "‚Ä¢ `/convert 100 USD RUB`\n"
            "‚Ä¢ `/convert 5000 RUB CNY`\n\n"
            "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, CNY, RUB –∏ –¥—Ä—É–≥–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¶–ë –†–§",
            parse_mode="Markdown"
        )
    except Exception as e:
        await update.message.reply_text(
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!*\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )

"""–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ NewsAPI"""
async def get_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        url = f"https://newsapi.org/v2/everything?q=–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥&apiKey={API_KEY}"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        
        if data['status'] != 'ok' or not data['articles']:
            raise ValueError("–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        message = "üìå *–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏* üìå\n\n"
        for i, article in enumerate(data['articles'][:3], 1):
            title = article['title']
            url = article['url']
            source = article['source']['name']
            published_at = datetime.strptime(article['publishedAt'], '%Y-%m-%dT%H:%M:%SZ').strftime('%d.%m.%Y %H:%M')
            
            message += (
                f"üì∞ *{title}*\n"
                f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({url})\n"
                f"üè∑ *–ò—Å—Ç–æ—á–Ω–∏–∫:* {source}\n"
                f"‚è∞ *–î–∞—Ç–∞:* {published_at}\n\n"
            )
            
        message += "‚ÑπÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)
    except Exception as e:
        await update.message.reply_text(
            "‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏!*\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.",
            parse_mode="Markdown"
        )

async def author(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë®‚Äçüíª *–û–± –∞–≤—Ç–æ—Ä–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞*\n\n"
        "–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω *Weit* –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n"
        "‚Ä¢ –†–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ API üåê\n\n"
        "üîπ *–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:* [GitHub](https://github.com/Weit145)\n"
        "_–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Å ‚ù§Ô∏è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏_",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )


def main():
    app = Application.builder().token(TOKEN).build()

    handlers = [
        CommandHandler("start", start),
        CommandHandler("news", get_news),
        CommandHandler("rates", get_rates),
        CommandHandler("convert", convert_currency),
        CommandHandler("author", author)
    ]
    
    for handler in handlers:
        app.add_handler(handler)
        
    app.run_polling()

if __name__ == "__main__":
    main()